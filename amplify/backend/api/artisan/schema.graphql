# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY {
  globalAuthRule: AuthRule = { allow: public }
} # FOR TESTING ONLY!
type User
  @model
  @auth(
    rules: [
      { allow: public, operations: [read] }
      { allow: private, operations: [read, update] }
      { allow: owner, ownerField: "sub" }
    ]
  )
  @searchable {
  sub: ID! @primaryKey
  username: String!
  email: String
  profileURI: String
  bio: String
  ownedTokens: [Token] @manyToMany(relationName: "TokenOwners")
  createdTokens: [Token] @hasMany
  likedTokens: [Token] @manyToMany(relationName: "UserTokenLikes")
  createdCollections: [Collection] @hasMany
  likedCollections: [Collection]
    @manyToMany(relationName: "UserCollectionLikes")
  externals: [String]
}

type Token
  @model
  @auth(
    rules: [
      { allow: public, operations: [read] }
      { allow: private, operations: [read, update] }
      { allow: owner, ownerField: "creator" }
    ]
  )
  @searchable {
  id: ID! @primaryKey
  owners: [User!]! @manyToMany(relationName: "TokenOwners")
  creator: User! @belongsTo
  collection: Collection @belongsTo
  contentURI: String!
  price: Float
  royalty: Float
  supply: Int!
  name: String!
  description: String!
  unlockable: String
  external: String
  explicit: Boolean
  traits: [String]
  views: Int
  likes: [User] @manyToMany(relationName: "UserTokenLikes")
}

type Collection
  @model
  @auth(
    rules: [
      { allow: public, operations: [read] }
      { allow: private, operations: [read, update] }
      { allow: owner, ownerField: "creator" }
    ]
  )
  @searchable {
  id: ID! @primaryKey
  creator: User! @belongsTo
  tokens: [Token] @hasMany
  logoURI: String
  featuredURI: String
  bannerURI: String
  name: String!
  slug: String!
  description: String
  category: String
  externals: [String]
  royalty: Float
  paymentTokens: [String]
  explicit: Boolean
  views: Int
  likes: [User] @manyToMany(relationName: "UserCollectionLikes")
  floorPrice: Float
}
